Архитектура проекта (по состоянию на 24.09.2025)
================================================

#1. Точки входа:

###        manage.py: Основной CLI-интерфейс для запуска поиска (search) и UI (ui). Он парсит аргументы, загружает нужный YAML-конфиг и передает управление SearchOrchestrator.

###        main_search.py: Содержит класс SearchOrchestrator, который является ядром "Конструкторского Бюро". Он управляет процессом поиска с помощью Optuna, логированием в MLflow и запускает отдельные эксперименты через ExperimentRunner.

#2. "Конструкторское Бюро" (Оркестрация):

###        SearchOrchestrator инициализирует все необходимые компоненты "Инструментария" (DataPreparer, ModelTrainer, Backtester) один раз и использует их в целевой функции Optuna (objective).

###        ExperimentRunner выступает в роли "прораба" для одного конкретного запуска, последовательно вызывая DataPreparer, ModelTrainer и Backtester.

###        entities.py определяет "паспорт" эксперимента (ExperimentConfig), обеспечивая структурированную передачу параметров.

#3. "Инструментарий" (Исполнители):

##Работа с данными:

###            FileLoader отвечает за загрузку и первичную обработку CSV-файлов, включая создание DatetimeIndex.

###            FeatureEngineer динамически создает признаки на основе AppConfig.

###            DataLabeler создает целевые переменные для регрессии или классификации.

###            DataSplitter выполняет хронологическое разделение и масштабирование данных.

###            DataPreparer оркестрирует все вышеперечисленные шаги и использует CacheUtils для кеширования результатов, чтобы избежать повторной обработки.

###            DatasetBuilder нарезает данные на окна и преобразует их в формат, необходимый для конкретной модели (tf.data.Dataset для Keras, плоские numpy массивы для LightGBM).

##Моделирование:

###            model_trainer.py (не предоставлен, но его роль ясна) загружает данные, вызывает DatasetBuilder, создает экземпляр модели из фабрики и обучает ее.

###            src/models/: Содержит реализации конкретных моделей (AlgofusionLSTMModel, KerasLSTMModel, LightGBMModel), которые наследуются от общего BaseModel.

##Анализ и оценка:

###            Backtester использует vectorbt для проведения финансового бэктеста на предсказаниях модели.

###            statistical_analyzer.py (не предоставлен, но упомянут в DataPreparer) отвечает за статистический анализ данных.

#4. Конфигурация и служебные компоненты:

###        AppConfig: Централизованное хранилище всех настроек и путей.

###        AppLogger: Singleton для логирования.

###        configs/: YAML-файлы, описывающие эксперименты для разных моделей. Я подтверждаю наличие 4-х конфигурационных файлов, соответствующих предоставленным моделям.
